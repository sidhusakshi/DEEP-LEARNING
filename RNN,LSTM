import numpy as np import 
tensorflow as tf
# Generate synthetic data data 
= np.random.rand(100, 1) X, 
y = [], [] for i in 
range(len(data) - 4): 
X.append(data[i:i+4])
y.append(data[i+4])
X, y = np.array(X), np.array(y)
# Build and train the RNN model model = 
tf.keras.Sequential([ tf.keras.layers.SimpleRNN(50, 
input_shape=(4, 1)),
tf.keras.layers.Dense(1)
])
model.compile(optimizer='adam', loss='mse') 
model.fit(X, y, epochs=200, verbose=0)
# Predict the next value print('Predicted Rainfall for the next day: 
',model.predict(data[-4:].reshape(1, 4, 1)))





LSTM
import tensorflow as tf
from sklearn.model_selection import train_test_split import 
nltk
from nltk.corpus import movie_reviews 
nltk.download('movie_reviews')
# Load and preprocess data
sentences = [" ".join(movie_reviews.words(fileid)) for fileid in movie_reviews.fileids()] labels 
= [1 if fileid.startswith('pos') else 0 for fileid in movie_reviews.fileids()]
tokenizer = tf.keras.preprocessing.text.Tokenizer(num_words=5000)
X = tokenizer.texts_to_sequences(sentences)
X = tf.keras.preprocessing.sequence.pad_sequences(X, maxlen=100) 
y = np.array(labels)
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)
# Build and train the LSTM model model = 
tf.keras.Sequential([ tf.keras.layers.Embedding(5000, 128, 
input_length=100), tf.keras.layers.LSTM(128),
tf.keras.layers.Dense(1, activation='sigmoid')
])
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy']) 
model.fit(X_train, y_train, epochs=5, batch_size=64, validation_data=(X_test, y_test))
# Evaluate the model
print('Test Accuracy: ',model.evaluate(X_test, y_test)[1]) 
